package Exceptions;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class TestExceptions {



    // ************************** Exception v√©rifi√©e *******************************
    // Exemple : Lire un fichier qui n'existe pas.
    // Cette m√©thode peut lever une exception de type FileNotFoundException,
    // donc il est obligatoire de g√©rer cette exception avec un try-catch ou de la d√©clarer avec 'throws'.

    public static void lireFichier(String nomFichier) throws FileNotFoundException {
        File fichier = new File(nomFichier); // Cr√©e un objet File repr√©sentant le fichier √† lire
        Scanner scanner = null;
        try {
            scanner = new Scanner(fichier); // Le scanner permet de lire le fichier. Il peut lever une FileNotFoundException si le fichier n'existe pas.
            // On lit le fichier ligne par ligne.
            while (scanner.hasNextLine()) {
                System.out.println(scanner.nextLine()); // Affiche chaque ligne du fichier
            }
        } finally {
            // Le bloc finally s'ex√©cute toujours, m√™me en cas d'exception. Ici, on ferme le scanner pour lib√©rer les ressources.
            if (scanner != null) {
                scanner.close(); // Ferme le scanner pour √©viter les fuites de m√©moire
            }
        }
    }
    // ***************************** Exception d'ex√©cution ********************************
    // Exemple : Acc√®s √† un √©l√©ment hors limites d'un tableau.
    // Il n'est pas n√©cessaire d'ajouter 'throws' ici, mais on peut capturer l'exception avec un try-catch si n√©cessaire.

    public static void accederTableau() {
        int[] nombres = {1, 2, 3}; // Cr√©e un tableau de 3 entiers
        System.out.println(nombres[5]); // Essaye d'acc√©der √† un index qui n'existe pas dans le tableau
        // Cela g√©n√®re une ArrayIndexOutOfBoundsException
    }

    // ******************************** Lever une Exception Personnalis√©e *************************
    // Cette m√©thode v√©rifie si l'√¢ge est inf√©rieur √† 18 et l√®ve une exception personnalis√©e si l'√¢ge n'est pas valide.

    public static void checkAge(int age) throws AgeNotValidException {
        if (age < 18) {
            // Si l'√¢ge est inf√©rieur √† 18, on lance une exception personnalis√©e avec un message d'erreur.
            throw new AgeNotValidException("√Çge invalide ! Vous devez avoir au moins 18 ans.");
        } else {
            // Si l'√¢ge est valide, on affiche un message autorisant l'acc√®s
            System.out.println("Acc√®s autoris√© üéâ !");
        }
    }

    public static void main(String[] args) {
        // Test 1 : Lecture d'un fichier inexistant
        try {
            lireFichier("fichier_inexistant.txt"); // Essaie de lire un fichier qui n'existe pas
        } catch (FileNotFoundException e) {
            // Si le fichier n'existe pas, on capture l'exception et on affiche un message d'erreur
            System.out.println("Erreur : Fichier introuvable !");
        }

        // Test 2 : Acc√®s hors limites d'un tableau
        try {
            accederTableau(); // Essaie d'acc√©der √† un index hors limites dans un tableau
        } catch (ArrayIndexOutOfBoundsException e) {
            // Si l'index est invalide, on capture l'exception et on affiche un message d'erreur
            System.out.println("Erreur : Tentative d'acc√®s hors limites du tableau !");
        }

        // Test 3 : V√©rification de l'√¢ge avec une exception personnalis√©e
        try {
            checkAge(16); // Essaie de v√©rifier un √¢ge inf√©rieur √† 18, ce qui d√©clenchera l'exception personnalis√©e
        } catch (AgeNotValidException e) {
            // Si l'exception personnalis√©e est lanc√©e, on capture l'exception et on affiche le message d'erreur
            System.out.println("Exception captur√©e : " + e.getMessage());
        }
    }
}
